# Budget-Overrun-Detection using Synthetic Data

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix

# 1. Generate synthetic data
np.random.seed(42)

# Let's create 1000 projects
n_projects = 1000

# Estimated budgets between $10,000 and $500,000
estimated_budget = np.random.uniform(10000, 500000, n_projects)

# Actual spending: around the budget +- some noise
actual_spent = estimated_budget * np.random.normal(1.0, 0.2, n_projects)

# Project types
project_types = np.random.choice(['Construction', 'IT', 'Consulting', 'Research'], size=n_projects)

# Duration in months
duration_months = np.random.randint(3, 24, n_projects)

# 2. Create DataFrame
df = pd.DataFrame({
    'Estimated_Budget': estimated_budget,
    'Actual_Spent': actual_spent,
    'Project_Type': project_types,
    'Duration_Months': duration_months
})

# 3. Define overrun
df['Budget_Overrun'] = (df['Actual_Spent'] > df['Estimated_Budget']).astype(int)

print(df.head())

# 4. Visualize
plt.scatter(df['Estimated_Budget'], df['Actual_Spent'], c=df['Budget_Overrun'], cmap='coolwarm', alpha=0.6)
plt.xlabel('Estimated Budget ($)')
plt.ylabel('Actual Spending ($)')
plt.title('Budget vs Actual with Overrun Flag')
plt.grid(True)
plt.show()

# 5. Encode categorical variables
df_encoded = pd.get_dummies(df, columns=['Project_Type'], drop_first=True)

# 6. Split dataset
X = df_encoded.drop(['Budget_Overrun', 'Actual_Spent'], axis=1)
y = df_encoded['Budget_Overrun']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 7. Train simple classifier
clf = DecisionTreeClassifier(max_depth=5, random_state=42)
clf.fit(X_train, y_train)

# 8. Evaluate
y_pred = clf.predict(X_test)

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

